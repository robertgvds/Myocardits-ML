{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8901757,"sourceType":"datasetVersion","datasetId":5242143},{"sourceId":8947993,"sourceType":"datasetVersion","datasetId":5242137}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/robertgvds/treinamento-myocarditis?scriptVersionId=188329197\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# TREINAMENTO REDE KCL-CNN COM DATASET EQUILIBRADO CLEANED 100x100 ","metadata":{}},{"cell_type":"code","source":"!nvidia-smi","metadata":{"execution":{"iopub.status.busy":"2024-07-15T03:48:22.209274Z","iopub.execute_input":"2024-07-15T03:48:22.209672Z","iopub.status.idle":"2024-07-15T03:48:23.561208Z","shell.execute_reply.started":"2024-07-15T03:48:22.20964Z","shell.execute_reply":"2024-07-15T03:48:23.56003Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  pid, fd = os.forkpty()\n","output_type":"stream"},{"name":"stdout","text":"Mon Jul 15 03:48:23 2024       \n+-----------------------------------------------------------------------------------------+\n| NVIDIA-SMI 550.90.07              Driver Version: 550.90.07      CUDA Version: 12.4     |\n|-----------------------------------------+------------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n|                                         |                        |               MIG M. |\n|=========================================+========================+======================|\n|   0  Tesla T4                       Off |   00000000:00:04.0 Off |                    0 |\n| N/A   67C    P0             30W /   70W |   14075MiB /  15360MiB |      0%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n|   1  Tesla T4                       Off |   00000000:00:05.0 Off |                    0 |\n| N/A   77C    P0             34W /   70W |     103MiB /  15360MiB |      0%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n                                                                                         \n+-----------------------------------------------------------------------------------------+\n| Processes:                                                                              |\n|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\n|        ID   ID                                                               Usage      |\n|=========================================================================================|\n+-----------------------------------------------------------------------------------------+\n","output_type":"stream"}]},{"cell_type":"code","source":"import os\nos.environ['TF_DISABLE_JIT'] = '1'","metadata":{"execution":{"iopub.status.busy":"2024-07-15T03:48:23.564139Z","iopub.execute_input":"2024-07-15T03:48:23.565033Z","iopub.status.idle":"2024-07-15T03:48:23.572471Z","shell.execute_reply.started":"2024-07-15T03:48:23.564983Z","shell.execute_reply":"2024-07-15T03:48:23.571216Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"!jupyter notebook --NotebookApp.iopub_msg_rate_limit=1.0e10","metadata":{"execution":{"iopub.status.busy":"2024-07-15T03:48:23.574057Z","iopub.execute_input":"2024-07-15T03:48:23.574396Z","iopub.status.idle":"2024-07-15T03:48:30.255241Z","shell.execute_reply.started":"2024-07-15T03:48:23.574368Z","shell.execute_reply":"2024-07-15T03:48:30.254124Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"\u001b[32m[I 03:48:26.674 NotebookApp]\u001b[m [nb_conda_kernels] enabled, 1 kernels found\n\n  _   _          _      _\n | | | |_ __  __| |__ _| |_ ___\n | |_| | '_ \\/ _` / _` |  _/ -_)\n  \\___/| .__/\\__,_\\__,_|\\__\\___|\n       |_|\n                       \nRead the migration plan to Notebook 7 to learn about the new features and the actions to take if you are using extensions.\n\nhttps://jupyter-notebook.readthedocs.io/en/latest/migrate_to_notebook7.html\n\nPlease note that updating to Notebook 7 might break some of your extensions.\n\n\u001b[32m[I 03:48:27.060 NotebookApp]\u001b[m Registered dataproc_jupyter_plugin server extension\njupyter_http_over_ws extension initialized. Listening on /http_over_websocket\n\u001b[32m[I 03:48:27.386 NotebookApp]\u001b[m Skipped non-installed server(s): bash-language-server, dockerfile-language-server-nodejs, javascript-typescript-langserver, jedi-language-server, julia-language-server, pyright, python-language-server, r-languageserver, sql-language-server, texlab, typescript-language-server, unified-language-server, vscode-css-languageserver-bin, vscode-html-languageserver-bin, vscode-json-languageserver-bin, yaml-language-server\n\u001b[32m[I 03:48:27.874 NotebookApp]\u001b[m [Jupytext Server Extension] Deriving a JupytextContentsManager from LargeFileManager\n\u001b[32m[I 03:48:28.206 NotebookApp]\u001b[m [nb_conda] enabled\n\u001b[35m[C 03:48:28.288 NotebookApp]\u001b[m You must use Jupyter Server v1 to load nbdime as a classic notebook server extension. You have v2.12.5 installed.\n    You can fix this by executing:\n        pip install -U \"jupyter-server<2.0.0\"\n\u001b[35m[C 03:48:29.791 NotebookApp]\u001b[m Running as root is not recommended. Use --allow-root to bypass.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Bibliotecas e Constantes","metadata":{}},{"cell_type":"code","source":"!pip install tensorflow[and-cuda]\n\n!pip install tf-keras-vis","metadata":{"execution":{"iopub.status.busy":"2024-07-15T03:48:30.258216Z","iopub.execute_input":"2024-07-15T03:48:30.258588Z","iopub.status.idle":"2024-07-15T03:48:59.401566Z","shell.execute_reply.started":"2024-07-15T03:48:30.25855Z","shell.execute_reply":"2024-07-15T03:48:59.400468Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"Requirement already satisfied: tensorflow[and-cuda] in /opt/conda/lib/python3.10/site-packages (2.17.0)\nRequirement already satisfied: absl-py>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (1.4.0)\nRequirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (1.6.3)\nRequirement already satisfied: flatbuffers>=24.3.25 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (24.3.25)\nRequirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (0.5.4)\nRequirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (0.2.0)\nRequirement already satisfied: h5py>=3.10.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (3.10.0)\nRequirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (16.0.6)\nRequirement already satisfied: ml-dtypes<0.5.0,>=0.3.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (0.4.0)\nRequirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (3.3.0)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (21.3)\nRequirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (3.20.3)\nRequirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (2.32.3)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (69.0.3)\nRequirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (1.16.0)\nRequirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (2.4.0)\nRequirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (4.9.0)\nRequirement already satisfied: wrapt>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (1.14.1)\nRequirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (1.59.3)\nRequirement already satisfied: tensorboard<2.18,>=2.17 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (2.17.0)\nRequirement already satisfied: keras>=3.2.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (3.3.3)\nRequirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (0.35.0)\nRequirement already satisfied: numpy<2.0.0,>=1.23.5 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (1.26.4)\nRequirement already satisfied: nvidia-cublas-cu12==12.3.4.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (12.3.4.1)\nRequirement already satisfied: nvidia-cuda-cupti-cu12==12.3.101 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (12.3.101)\nRequirement already satisfied: nvidia-cuda-nvcc-cu12==12.3.107 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (12.3.107)\nRequirement already satisfied: nvidia-cuda-nvrtc-cu12==12.3.107 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (12.3.107)\nRequirement already satisfied: nvidia-cuda-runtime-cu12==12.3.101 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (12.3.101)\nRequirement already satisfied: nvidia-cudnn-cu12==8.9.7.29 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (8.9.7.29)\nRequirement already satisfied: nvidia-cufft-cu12==11.0.12.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (11.0.12.1)\nRequirement already satisfied: nvidia-curand-cu12==10.3.4.107 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (10.3.4.107)\nRequirement already satisfied: nvidia-cusolver-cu12==11.5.4.101 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (11.5.4.101)\nRequirement already satisfied: nvidia-cusparse-cu12==12.2.0.103 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (12.2.0.103)\nRequirement already satisfied: nvidia-nccl-cu12==2.19.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (2.19.3)\nRequirement already satisfied: nvidia-nvjitlink-cu12==12.3.101 in /opt/conda/lib/python3.10/site-packages (from tensorflow[and-cuda]) (12.3.101)\nRequirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow[and-cuda]) (0.42.0)\nRequirement already satisfied: rich in /opt/conda/lib/python3.10/site-packages (from keras>=3.2.0->tensorflow[and-cuda]) (13.7.0)\nRequirement already satisfied: namex in /opt/conda/lib/python3.10/site-packages (from keras>=3.2.0->tensorflow[and-cuda]) (0.0.8)\nRequirement already satisfied: optree in /opt/conda/lib/python3.10/site-packages (from keras>=3.2.0->tensorflow[and-cuda]) (0.11.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow[and-cuda]) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow[and-cuda]) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow[and-cuda]) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow[and-cuda]) (2024.2.2)\nRequirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.18,>=2.17->tensorflow[and-cuda]) (3.5.2)\nRequirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.18,>=2.17->tensorflow[and-cuda]) (0.7.2)\nRequirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.18,>=2.17->tensorflow[and-cuda]) (3.0.3)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->tensorflow[and-cuda]) (3.1.1)\nRequirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard<2.18,>=2.17->tensorflow[and-cuda]) (2.1.3)\nRequirement already satisfied: markdown-it-py>=2.2.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras>=3.2.0->tensorflow[and-cuda]) (3.0.0)\nRequirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras>=3.2.0->tensorflow[and-cuda]) (2.17.2)\nRequirement already satisfied: mdurl~=0.1 in /opt/conda/lib/python3.10/site-packages (from markdown-it-py>=2.2.0->rich->keras>=3.2.0->tensorflow[and-cuda]) (0.1.2)\nCollecting tf-keras-vis\n  Downloading tf_keras_vis-0.8.7-py3-none-any.whl.metadata (10 kB)\nRequirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (from tf-keras-vis) (1.11.4)\nRequirement already satisfied: pillow in /opt/conda/lib/python3.10/site-packages (from tf-keras-vis) (9.5.0)\nRequirement already satisfied: deprecated in /opt/conda/lib/python3.10/site-packages (from tf-keras-vis) (1.2.14)\nRequirement already satisfied: imageio in /opt/conda/lib/python3.10/site-packages (from tf-keras-vis) (2.33.1)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from tf-keras-vis) (21.3)\nRequirement already satisfied: wrapt<2,>=1.10 in /opt/conda/lib/python3.10/site-packages (from deprecated->tf-keras-vis) (1.14.1)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from imageio->tf-keras-vis) (1.26.4)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->tf-keras-vis) (3.1.1)\nDownloading tf_keras_vis-0.8.7-py3-none-any.whl (52 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m52.5/52.5 kB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: tf-keras-vis\nSuccessfully installed tf-keras-vis-0.8.7\n","output_type":"stream"}]},{"cell_type":"code","source":"#------------------------------------------------------------------------------\n# BIBLIOTECAS\n\nimport os\nimport numpy as np\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport sys\nimport random\n\n# BIBLIOTECAS DEEP LEARNING\nimport datetime\nimport tensorflow as tf\nfrom sklearn.metrics import auc, classification_report, confusion_matrix, roc_curve\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Flatten\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import CSVLogger\nfrom tensorflow.keras.optimizers import AdamW\nfrom tensorflow.keras.preprocessing import image\nfrom tf_keras_vis.gradcam import Gradcam\nfrom tf_keras_vis.utils.scores import CategoricalScore\nfrom tf_keras_vis.utils.model_modifiers import ReplaceToLinear\n\n#------------------------------------------------------------------------------\n# CONSTANTES\n\nDATASET_TYPE = ['cleaned','limited-to-five', 'limited-to-ten', 'selected']\nDATASET_TYPE = DATASET_TYPE[3] # Dataset utilizado no treinamento\n\nDATASET_COMPLETO = True\n\nCNN_MODEL = ['rede-inicial', 'kcl-cnn']\nCNN_MODEL = CNN_MODEL[0] # Rede utilizada no treinamento\n\nSEED = 10\nnp.random.seed(SEED) # semente geradora dos numeros aleatorios\nrandom.seed(SEED)\ntf.random.set_seed(SEED)\n\nN_FOLDS = 5\nN_EPOCHS = 30\nBATCH_SIZE = 512\nSIZE = 100\nTARGET_SIZE = (SIZE, SIZE)","metadata":{"execution":{"iopub.status.busy":"2024-07-15T04:40:22.024801Z","iopub.execute_input":"2024-07-15T04:40:22.025998Z","iopub.status.idle":"2024-07-15T04:40:22.131153Z","shell.execute_reply.started":"2024-07-15T04:40:22.025958Z","shell.execute_reply":"2024-07-15T04:40:22.129916Z"},"trusted":true},"execution_count":57,"outputs":[]},{"cell_type":"markdown","source":"## Diretórios e Carregamentos de Dados","metadata":{}},{"cell_type":"code","source":"# Criando pasta de resultados\nif not os.path.exists(f'{DATASET_TYPE}'):\n    os.mkdir(f'{DATASET_TYPE}')","metadata":{"execution":{"iopub.status.busy":"2024-07-15T03:48:59.507716Z","iopub.execute_input":"2024-07-15T03:48:59.50808Z","iopub.status.idle":"2024-07-15T03:48:59.513207Z","shell.execute_reply.started":"2024-07-15T03:48:59.508052Z","shell.execute_reply":"2024-07-15T03:48:59.51202Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"#------------------------------------------------------------------------------\n# DIRETÓRIOS DOS DATASETS\n\nDATASET_PATH = f'/kaggle/input/myocardits-dataset-{DATASET_TYPE}/{SIZE}'\nRESULTS_PATH = f'/kaggle/working/{DATASET_TYPE}'\n\nNORMAL_PATH = DATASET_PATH + '/Normal/'\nSICK_PATH = DATASET_PATH + '/Sick/'\n\n# Diretorios de cada Individuo:\nnormal_datasets = [f'{NORMAL_PATH}Individuo_{i:02}/' for i in range(1, 17)]\nsick_datasets = [f'{SICK_PATH}Individuo_{i:02}/' for i in range(17, 48)]\n\nprint(normal_datasets)\nprint(sick_datasets)\n\nNORMAL_SPLITS = [[9, 10, 12, 15],\n                 [1,8,11],\n                 [4,5,14],\n                 [2,7,13],\n                 [3,6,16]]\n\nif DATASET_COMPLETO == True:\n    SICK_SPLITS = [[21,23,26,27,36,38],\n                   [18,37,39,40,41,45,46],\n                   [20,24,28,29,31,32],\n                   [19,22,30,33,42,47],\n                   [17,25,34,35,43,44]]\n    \nif DATASET_COMPLETO == False:\n    SICK_SPLITS = [[23,26,27,36],\n                   [37,39,40,41,45],\n                   [24,28,29,31],\n                   [22,30,33,42],\n                   [17,25,34]]\n\nnormal_splits = [[],[],[],[],[]]\nsick_splits = [[],[],[],[],[]]\n\nfor split in range(N_FOLDS):\n    normal_splits[split].extend(normal_datasets[i-1] for i in NORMAL_SPLITS[split])\n    sick_splits[split].extend(sick_datasets[i-17] for i in SICK_SPLITS[split])","metadata":{"execution":{"iopub.status.busy":"2024-07-15T03:48:59.514677Z","iopub.execute_input":"2024-07-15T03:48:59.515221Z","iopub.status.idle":"2024-07-15T03:48:59.531137Z","shell.execute_reply.started":"2024-07-15T03:48:59.515171Z","shell.execute_reply":"2024-07-15T03:48:59.530201Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"['/kaggle/input/myocardits-dataset-selected/100/Normal/Individuo_01/', '/kaggle/input/myocardits-dataset-selected/100/Normal/Individuo_02/', '/kaggle/input/myocardits-dataset-selected/100/Normal/Individuo_03/', '/kaggle/input/myocardits-dataset-selected/100/Normal/Individuo_04/', '/kaggle/input/myocardits-dataset-selected/100/Normal/Individuo_05/', '/kaggle/input/myocardits-dataset-selected/100/Normal/Individuo_06/', '/kaggle/input/myocardits-dataset-selected/100/Normal/Individuo_07/', '/kaggle/input/myocardits-dataset-selected/100/Normal/Individuo_08/', '/kaggle/input/myocardits-dataset-selected/100/Normal/Individuo_09/', '/kaggle/input/myocardits-dataset-selected/100/Normal/Individuo_10/', '/kaggle/input/myocardits-dataset-selected/100/Normal/Individuo_11/', '/kaggle/input/myocardits-dataset-selected/100/Normal/Individuo_12/', '/kaggle/input/myocardits-dataset-selected/100/Normal/Individuo_13/', '/kaggle/input/myocardits-dataset-selected/100/Normal/Individuo_14/', '/kaggle/input/myocardits-dataset-selected/100/Normal/Individuo_15/', '/kaggle/input/myocardits-dataset-selected/100/Normal/Individuo_16/']\n['/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_17/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_18/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_19/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_20/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_21/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_22/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_23/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_24/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_25/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_26/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_27/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_28/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_29/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_30/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_31/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_32/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_33/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_34/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_35/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_36/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_37/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_38/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_39/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_40/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_41/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_42/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_43/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_44/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_45/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_46/', '/kaggle/input/myocardits-dataset-selected/100/Sick/Individuo_47/']\n","output_type":"stream"}]},{"cell_type":"code","source":"#------------------------------------------------------------------------------\n# CARREGAMENTO DE DADOS COM SEPARAÇÃO DE INDIVIDUOS\n\n'''\n\nprint('\\nIniciando carregamento e processamento das imagens..............!')\n\ndef carregar_imagens(diretorio):\n    global num_imagens\n    imagens = []\n    for pasta_atual, subpastas, arquivos in os.walk(diretorio):\n        for arquivo in arquivos:\n            if arquivo.endswith(('.jpg', '.jpeg', '.png')):\n                caminho = os.path.join(pasta_atual, arquivo)\n                \n                img = Image.open(caminho)\n                img = img.resize(TARGET_SIZE)\n                img_array = np.array(img)\n                imagens.append(img_array)\n                \n                num_imagens += 1\n                sys.stdout.write(\"\\rNumero de imagens carregados: %i\" % num_imagens)\n                sys.stdout.flush()\n                \n    return imagens\n\nnum_imagens = 0\n\nprint('\\nPacientes normais:')\nnormal_groups = []\nfor diretorios in normal_splits:\n    imagens = []\n    for individuos in diretorios:\n        imagens.extend(carregar_imagens(individuos))\n    normal_groups.append(imagens)\n\nnum_imagens = 0\n\nprint('\\n\\nPacientes doentes:')\nsick_groups = []\nfor diretorios in sick_splits:\n    imagens = []\n    for individuos in diretorios:\n        imagens.extend(carregar_imagens(individuos))\n    sick_groups.append(imagens)\n\n# DATASETS SEPRADAOS EM 5 PARA VALIDAÇÃO CRUZADA    \nx_data = [[],[],[],[],[]]\ny_data = [[],[],[],[],[]]\n\nprint('\\n\\nNumero de imagens por split:')\nfor i in range(N_FOLDS):\n    x_data[i].extend(path for path in normal_groups[i])\n    y_data[i].extend([1, 0] for path in normal_groups[i])\n    x_data[i].extend(path for path in sick_groups[i])\n    y_data[i].extend([0, 1] for path in sick_groups[i])\n    print(f'Split {i+1}: {len(x_data[i])} imagens ({len(normal_groups[i])} saudáveis e {len(sick_groups[i])} doentes).')\n\n'''","metadata":{"execution":{"iopub.status.busy":"2024-07-15T03:48:59.532615Z","iopub.execute_input":"2024-07-15T03:48:59.53302Z","iopub.status.idle":"2024-07-15T03:48:59.547327Z","shell.execute_reply.started":"2024-07-15T03:48:59.532975Z","shell.execute_reply":"2024-07-15T03:48:59.54614Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"'\\n\\nprint(\\'\\nIniciando carregamento e processamento das imagens..............!\\')\\n\\ndef carregar_imagens(diretorio):\\n    global num_imagens\\n    imagens = []\\n    for pasta_atual, subpastas, arquivos in os.walk(diretorio):\\n        for arquivo in arquivos:\\n            if arquivo.endswith((\\'.jpg\\', \\'.jpeg\\', \\'.png\\')):\\n                caminho = os.path.join(pasta_atual, arquivo)\\n                \\n                img = Image.open(caminho)\\n                img = img.resize(TARGET_SIZE)\\n                img_array = np.array(img)\\n                imagens.append(img_array)\\n                \\n                num_imagens += 1\\n                sys.stdout.write(\"\\rNumero de imagens carregados: %i\" % num_imagens)\\n                sys.stdout.flush()\\n                \\n    return imagens\\n\\nnum_imagens = 0\\n\\nprint(\\'\\nPacientes normais:\\')\\nnormal_groups = []\\nfor diretorios in normal_splits:\\n    imagens = []\\n    for individuos in diretorios:\\n        imagens.extend(carregar_imagens(individuos))\\n    normal_groups.append(imagens)\\n\\nnum_imagens = 0\\n\\nprint(\\'\\n\\nPacientes doentes:\\')\\nsick_groups = []\\nfor diretorios in sick_splits:\\n    imagens = []\\n    for individuos in diretorios:\\n        imagens.extend(carregar_imagens(individuos))\\n    sick_groups.append(imagens)\\n\\n# DATASETS SEPRADAOS EM 5 PARA VALIDAÇÃO CRUZADA    \\nx_data = [[],[],[],[],[]]\\ny_data = [[],[],[],[],[]]\\n\\nprint(\\'\\n\\nNumero de imagens por split:\\')\\nfor i in range(N_FOLDS):\\n    x_data[i].extend(path for path in normal_groups[i])\\n    y_data[i].extend([1, 0] for path in normal_groups[i])\\n    x_data[i].extend(path for path in sick_groups[i])\\n    y_data[i].extend([0, 1] for path in sick_groups[i])\\n    print(f\\'Split {i+1}: {len(x_data[i])} imagens ({len(normal_groups[i])} saudáveis e {len(sick_groups[i])} doentes).\\')\\n\\n'"},"metadata":{}}]},{"cell_type":"code","source":"#------------------------------------------------------------------------------\n# CARREGAMENTO DE DADOS SEM SEPRAÇÃO DE INDIVIDUOS\n\nprint('\\nIniciando carregamento e processamento das imagens..............!')\n\ndef carregar_imagens(diretorio):\n    global num_imagens\n    imagens = []\n    for pasta_atual, subpastas, arquivos in os.walk(diretorio):\n        for arquivo in arquivos:\n            if arquivo.endswith(('.jpg', '.jpeg', '.png')):\n                caminho = os.path.join(pasta_atual, arquivo)\n                \n                img = Image.open(caminho)\n                img = img.resize(TARGET_SIZE)\n                img_array = np.array(img)\n                imagens.append(img_array)\n                \n                num_imagens += 1\n                sys.stdout.write(\"\\rNumero de imagens carregados: %i\" % num_imagens)\n                sys.stdout.flush()\n                \n    return imagens\n\nnum_imagens = 0\n\nprint('\\nPacientes normais:')\nnormal_groups = []\nfor diretorios in normal_splits:\n    imagens = []\n    for individuos in diretorios:\n        imagens.extend(carregar_imagens(individuos))\n    normal_groups.extend(imagens)\n\nnum_imagens = 0\n\nprint('\\n\\nPacientes doentes:')\nsick_groups = []\nfor diretorios in sick_splits:\n    imagens = []\n    for individuos in diretorios:\n        imagens.extend(carregar_imagens(individuos))\n    sick_groups.extend(imagens)\n    \nrandom.shuffle(normal_groups)\nnormal_groups = np.array_split(normal_groups, 5)\n\nrandom.shuffle(sick_groups)\nsick_groups = np.array_split(sick_groups, 5)\n\n\n# DATASETS SEPRADAOS EM 5 PARA VALIDAÇÃO CRUZADA    \nx_data = [[],[],[],[],[]]\ny_data = [[],[],[],[],[]]\n\nprint('\\n\\nNumero de imagens por split:')\nfor i in range(N_FOLDS):\n    x_data[i].extend(path for path in normal_groups[i])\n    y_data[i].extend([1, 0] for path in normal_groups[i])\n    x_data[i].extend(path for path in sick_groups[i])\n    y_data[i].extend([0, 1] for path in sick_groups[i])\n    print(f'Split {i+1}: {len(x_data[i])} imagens ({len(normal_groups[i])} saudáveis e {len(sick_groups[i])} doentes).')","metadata":{"execution":{"iopub.status.busy":"2024-07-15T03:48:59.548903Z","iopub.execute_input":"2024-07-15T03:48:59.549212Z","iopub.status.idle":"2024-07-15T03:49:03.53214Z","shell.execute_reply.started":"2024-07-15T03:48:59.54918Z","shell.execute_reply":"2024-07-15T03:49:03.531059Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"\nIniciando carregamento e processamento das imagens..............!\n\nPacientes normais:\nNumero de imagens carregados: 137\n\nPacientes doentes:\nNumero de imagens carregados: 258\n\nNumero de imagens por split:\nSplit 1: 80 imagens (28 saudáveis e 52 doentes).\nSplit 2: 80 imagens (28 saudáveis e 52 doentes).\nSplit 3: 79 imagens (27 saudáveis e 52 doentes).\nSplit 4: 78 imagens (27 saudáveis e 51 doentes).\nSplit 5: 78 imagens (27 saudáveis e 51 doentes).\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Treinamento","metadata":{}},{"cell_type":"code","source":"# Arquitetura CNN\nif CNN_MODEL == 'rede-inicial':\n    def cnn_model(input_shape, num_classes):\n        inputs = Input(shape=input_shape)\n        x = Conv2D(32, 3, padding='same', activation='relu', strides=2)(inputs)\n        x = Conv2D(64, 3, padding='same', activation='relu', strides=2)(x)\n        x = Conv2D(128, 3, padding='same', activation='relu', strides=2)(x)\n        x = Conv2D(256, 3, padding='same', activation='relu', strides=1)(x)\n        x = Conv2D(256, 3, padding='same', activation='relu', strides=1)(x)\n        x = Conv2D(256, 3, padding='same', activation='relu', strides=1)(x)\n        x = Flatten()(x)\n        x = Dense(256, activation='relu')(x)\n        x = Dense(128, activation='relu')(x)\n        x = Dense(64, activation='relu')(x)\n        x = Dropout(0.5)(x)\n        outputs = Dense(num_classes, activation='softmax')(x)\n        model = Model(inputs=inputs, outputs=outputs)\n        model.summary()\n        return model\n\nif CNN_MODEL == 'kcl-cnn':\n    def cnn_model(input_shape, num_classes):\n        model=Sequential()\n        model.add(Conv2D(32, 3, activation='relu', input_shape=input_shape))\n        model.add(MaxPooling2D())\n        model.add(Dropout(0.2))\n        model.add(Conv2D(64, 3, activation='relu'))\n        model.add(MaxPooling2D())\n        model.add(Dropout(0.2))\n        model.add(Conv2D(64, 3, activation='relu'))\n        model.add(MaxPooling2D())\n        model.add(Dropout(0.2))\n        model.add(Flatten())\n        model.add(Dense(100, activation='relu'))\n        model.add(Dropout(0.2))\n        model.add(Dense(num_classes, activation='softmax'))\n        return model","metadata":{"execution":{"iopub.status.busy":"2024-07-15T04:39:49.002794Z","iopub.execute_input":"2024-07-15T04:39:49.003188Z","iopub.status.idle":"2024-07-15T04:39:49.018113Z","shell.execute_reply.started":"2024-07-15T04:39:49.003157Z","shell.execute_reply":"2024-07-15T04:39:49.017052Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"code","source":"#------------------------------------------------------------------------------\n# SEPARAÇÃO DE DADOS E TREINAMENTO\n\nlst_accuracy=[]\nlst_accuracy_v=[]\nlst_acc=[]\nlst_loss=[]\nlst_reports=[]\nlst_AUC=[]\nlst_matrix=[]\nlst_matrix_v=[]\nlst_times=[]\nlst_history=[]\n\n#------------------------------------------------------------------------------\n# TREINAMENTO POR FOLDS\n\nfor fold in range(N_FOLDS):\n\n    print(f'\\n\\nFOLD {fold+1}:')\n\n    #--------------------------------------------------------------------------\n    # CARREGAMENTO DAS IMAGENS DE TREINAMENTO, VALIDACAO E TESTE\n\n    print(f'\\nCarregamento das imagens do fold {fold+1} para treinamento.............!')\n\n    folds = [0, 1, 2, 3, 4]\n\n    x_test = np.array(x_data[fold])\n    y_test = np.array(y_data[fold])\n    folds.remove(fold)\n\n    x_valid = np.array(x_data[folds[0]])\n    y_valid = np.array(y_data[folds[0]])\n    folds.remove(folds[0])\n\n    x_train, y_train = [], []\n    for i in folds:\n        x_train.extend(x_data[i])\n        y_train.extend(y_data[i])\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n\n    print(f'Numero de imagens no treinamento: {len(x_train)} imagens.')\n    print(f'Numero de imagens na validação: {len(x_valid)} imagens.')\n    print(f'Numero de imagens no teste: {len(x_test)} imagens.')\n\n    #--------------------------------------------------------------------------\n    # ARQUITETURA E COMPILACAO\n\n    model=cnn_model((SIZE, SIZE, 1), 2)\n    \n    OPTIMIZER = AdamW(weight_decay = 0.004)\n    \n    # Compilacao do modelo\n    model.compile(loss='categorical_crossentropy', optimizer=OPTIMIZER, metrics=['categorical_accuracy'])\n\n    #--------------------------------------------------------------------------\n    # TREINAMENTO\n    print('\\nIniciando o treinamento.........................................!\\n')\n\n    calback=CSVLogger(RESULTS_PATH + f'/logger_fold{fold+1}.log')\n\n    # Treinando o modelo\n    start=datetime.datetime.now()\n\n    history=model.fit(x_train, y_train, batch_size=BATCH_SIZE, epochs=N_EPOCHS, validation_data=(x_valid, y_valid), callbacks=[calback])\n\n    end=datetime.datetime.now()\n    training_time=end-start\n\n    # Salvamento do modelo\n    model.save(RESULTS_PATH + f'/{DATASET_TYPE}-CNN-{fold+1}.h5')\n\n    #--------------------------------------------------------------------------\n    # TESTE\n\n    # Testando o modelo\n    print(\"\\nTestando imagens................................................!\\n\")\n\n    # Acuracia e Perda do Teste\n    test_loss, test_acc = model.evaluate(x_test, y_test)\n\n    print(model.metrics_names)\n\n    #--------------------------------------------------------------------------\n    # ARMAZENAMENTO DOS INFORMACOES\n\n    # Fazendo previsões\n    predicts = model.predict(x_test)\n    predicts = predicts.argmax(axis=1)\n\n    # Obtendo os rótulos verdadeiros\n    actuals=y_test.argmax(axis=1)\n\n    # Calculando a curva ROC\n    fpr, tpr, _ = roc_curve(actuals, predicts, pos_label=1)\n    a = auc(fpr, tpr)\n\n    # Gerando o relatório de classificação\n    r = classification_report(actuals, predicts, zero_division=1)\n\n    # Calculando a matriz de confusão\n    c = confusion_matrix(actuals, predicts)\n    accuracy = np.trace(c)/np.sum(c)\n    \n    # Validação\n    # Fazendo previsões\n    predicts_v = model.predict(x_valid)\n    predicts_v = predicts_v.argmax(axis=1)\n\n    # Obtendo os rótulos verdadeiros\n    actuals_v=y_valid.argmax(axis=1)\n    \n    # Calculando a matriz de confusão\n    c_v = confusion_matrix(actuals, predicts)\n    accuracy_v = np.trace(c)/np.sum(c)\n\n    lst_history.append(history)\n    lst_times.append(training_time)\n    lst_accuracy.append(accuracy)\n    lst_acc.append(test_acc)\n    lst_loss.append(test_loss)\n    lst_AUC.append(a)\n    lst_reports.append(r)\n    lst_matrix.append(c)\n    \n    lst_accuracy_v.append(accuracy_v)\n    lst_matrix_v.append(c_v)","metadata":{"_kg_hide-output":false,"execution":{"iopub.status.busy":"2024-07-15T04:49:23.268147Z","iopub.execute_input":"2024-07-15T04:49:23.268531Z","iopub.status.idle":"2024-07-15T04:50:16.751896Z","shell.execute_reply.started":"2024-07-15T04:49:23.268501Z","shell.execute_reply":"2024-07-15T04:50:16.750892Z"},"trusted":true},"execution_count":62,"outputs":[{"name":"stdout","text":"\n\nFOLD 1:\n\nCarregamento das imagens do fold 1 para treinamento.............!\nNumero de imagens no treinamento: 235 imagens.\nNumero de imagens na validação: 80 imagens.\nNumero de imagens no teste: 80 imagens.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_436\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_436\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_52 (\u001b[38;5;33mInputLayer\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m1\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_299 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50\u001b[0m, \u001b[38;5;34m50\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │           \u001b[38;5;34m320\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_300 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m25\u001b[0m, \u001b[38;5;34m25\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m18,496\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_301 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │        \u001b[38;5;34m73,856\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_302 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m295,168\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_303 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_304 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_52 (\u001b[38;5;33mFlatten\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m43264\u001b[0m)          │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_198 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │    \u001b[38;5;34m11,075,840\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_199 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │        \u001b[38;5;34m32,896\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_200 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m8,256\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_67 (\u001b[38;5;33mDropout\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_201 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)              │           \u001b[38;5;34m130\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_52 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_299 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_300 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_301 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │        <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_302 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">295,168</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_303 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_304 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_52 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">43264</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_198 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │    <span style=\"color: #00af00; text-decoration-color: #00af00\">11,075,840</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_199 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_200 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_67 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_201 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">130</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m12,685,122\u001b[0m (48.39 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12,685,122</span> (48.39 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m12,685,122\u001b[0m (48.39 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12,685,122</span> (48.39 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"\nIniciando o treinamento.........................................!\n\nEpoch 1/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6s/step - categorical_accuracy: 0.3915 - loss: 1.1791 - val_categorical_accuracy: 0.6500 - val_loss: 17.3431\nEpoch 2/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 146ms/step - categorical_accuracy: 0.5830 - loss: 19.6881 - val_categorical_accuracy: 0.3500 - val_loss: 3.0480\nEpoch 3/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 138ms/step - categorical_accuracy: 0.3617 - loss: 3.7447 - val_categorical_accuracy: 0.6500 - val_loss: 0.6756\nEpoch 4/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 134ms/step - categorical_accuracy: 0.5362 - loss: 0.7381 - val_categorical_accuracy: 0.6500 - val_loss: 0.6615\nEpoch 5/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 133ms/step - categorical_accuracy: 0.6340 - loss: 0.6597 - val_categorical_accuracy: 0.6500 - val_loss: 0.6591\nEpoch 6/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 130ms/step - categorical_accuracy: 0.6468 - loss: 0.6565 - val_categorical_accuracy: 0.6500 - val_loss: 0.6605\nEpoch 7/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 135ms/step - categorical_accuracy: 0.6553 - loss: 0.6669 - val_categorical_accuracy: 0.6500 - val_loss: 0.6594\nEpoch 8/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 133ms/step - categorical_accuracy: 0.6340 - loss: 0.6489 - val_categorical_accuracy: 0.6500 - val_loss: 0.6518\nEpoch 9/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 131ms/step - categorical_accuracy: 0.6468 - loss: 0.6481 - val_categorical_accuracy: 0.6500 - val_loss: 0.6476\nEpoch 10/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 132ms/step - categorical_accuracy: 0.6596 - loss: 0.6264 - val_categorical_accuracy: 0.6500 - val_loss: 0.6439\n\nTestando imagens................................................!\n\n\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 363ms/step - categorical_accuracy: 0.4969 - loss: 0.6829\n['loss', 'compile_metrics']\n\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 171ms/step\n\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step \n\n\nFOLD 2:\n\nCarregamento das imagens do fold 2 para treinamento.............!\nNumero de imagens no treinamento: 235 imagens.\nNumero de imagens na validação: 80 imagens.\nNumero de imagens no teste: 80 imagens.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_438\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_438\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_53 (\u001b[38;5;33mInputLayer\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m1\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_305 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50\u001b[0m, \u001b[38;5;34m50\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │           \u001b[38;5;34m320\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_306 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m25\u001b[0m, \u001b[38;5;34m25\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m18,496\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_307 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │        \u001b[38;5;34m73,856\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_308 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m295,168\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_309 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_310 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_53 (\u001b[38;5;33mFlatten\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m43264\u001b[0m)          │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_202 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │    \u001b[38;5;34m11,075,840\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_203 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │        \u001b[38;5;34m32,896\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_204 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m8,256\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_68 (\u001b[38;5;33mDropout\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_205 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)              │           \u001b[38;5;34m130\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_53 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_305 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_306 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_307 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │        <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_308 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">295,168</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_309 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_310 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_53 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">43264</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_202 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │    <span style=\"color: #00af00; text-decoration-color: #00af00\">11,075,840</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_203 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_204 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_68 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_205 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">130</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m12,685,122\u001b[0m (48.39 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12,685,122</span> (48.39 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m12,685,122\u001b[0m (48.39 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12,685,122</span> (48.39 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"\nIniciando o treinamento.........................................!\n\nEpoch 1/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 8s/step - categorical_accuracy: 0.6000 - loss: 0.6780 - val_categorical_accuracy: 0.6500 - val_loss: 8.8816\nEpoch 2/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 151ms/step - categorical_accuracy: 0.6085 - loss: 9.2932 - val_categorical_accuracy: 0.3500 - val_loss: 0.8985\nEpoch 3/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 143ms/step - categorical_accuracy: 0.4170 - loss: 1.0597 - val_categorical_accuracy: 0.6500 - val_loss: 0.6601\nEpoch 4/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 151ms/step - categorical_accuracy: 0.6000 - loss: 0.6603 - val_categorical_accuracy: 0.6500 - val_loss: 0.6456\nEpoch 5/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 139ms/step - categorical_accuracy: 0.6596 - loss: 0.6480 - val_categorical_accuracy: 0.6500 - val_loss: 0.6477\nEpoch 6/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 135ms/step - categorical_accuracy: 0.6468 - loss: 0.6496 - val_categorical_accuracy: 0.6500 - val_loss: 0.6384\nEpoch 7/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 134ms/step - categorical_accuracy: 0.6383 - loss: 0.6537 - val_categorical_accuracy: 0.6500 - val_loss: 0.6300\nEpoch 8/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 134ms/step - categorical_accuracy: 0.6596 - loss: 0.6446 - val_categorical_accuracy: 0.6500 - val_loss: 0.6231\nEpoch 9/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 134ms/step - categorical_accuracy: 0.6340 - loss: 0.6354 - val_categorical_accuracy: 0.6500 - val_loss: 0.6174\nEpoch 10/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 149ms/step - categorical_accuracy: 0.6511 - loss: 0.6200 - val_categorical_accuracy: 0.6500 - val_loss: 0.6199\n\nTestando imagens................................................!\n\n\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 263ms/step - categorical_accuracy: 0.4969 - loss: 0.7039\n['loss', 'compile_metrics']\n\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 163ms/step\n\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step \n\n\nFOLD 3:\n\nCarregamento das imagens do fold 3 para treinamento.............!\nNumero de imagens no treinamento: 236 imagens.\nNumero de imagens na validação: 80 imagens.\nNumero de imagens no teste: 79 imagens.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_440\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_440\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_54 (\u001b[38;5;33mInputLayer\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m1\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_311 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50\u001b[0m, \u001b[38;5;34m50\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │           \u001b[38;5;34m320\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_312 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m25\u001b[0m, \u001b[38;5;34m25\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m18,496\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_313 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │        \u001b[38;5;34m73,856\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_314 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m295,168\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_315 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_316 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_54 (\u001b[38;5;33mFlatten\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m43264\u001b[0m)          │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_206 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │    \u001b[38;5;34m11,075,840\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_207 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │        \u001b[38;5;34m32,896\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_208 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m8,256\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_69 (\u001b[38;5;33mDropout\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_209 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)              │           \u001b[38;5;34m130\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_54 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_311 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_312 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_313 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │        <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_314 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">295,168</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_315 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_316 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_54 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">43264</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_206 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │    <span style=\"color: #00af00; text-decoration-color: #00af00\">11,075,840</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_207 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_208 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_69 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_209 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">130</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m12,685,122\u001b[0m (48.39 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12,685,122</span> (48.39 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m12,685,122\u001b[0m (48.39 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12,685,122</span> (48.39 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"\nIniciando o treinamento.........................................!\n\nEpoch 1/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6s/step - categorical_accuracy: 0.5254 - loss: 0.8916 - val_categorical_accuracy: 0.6500 - val_loss: 21.8275\nEpoch 2/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 151ms/step - categorical_accuracy: 0.6483 - loss: 24.4420 - val_categorical_accuracy: 0.3500 - val_loss: 1.2555\nEpoch 3/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 146ms/step - categorical_accuracy: 0.4534 - loss: 1.7244 - val_categorical_accuracy: 0.6500 - val_loss: 0.6662\nEpoch 4/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 133ms/step - categorical_accuracy: 0.5127 - loss: 0.6972 - val_categorical_accuracy: 0.6500 - val_loss: 0.6474\nEpoch 5/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 134ms/step - categorical_accuracy: 0.6525 - loss: 0.6481 - val_categorical_accuracy: 0.6500 - val_loss: 0.6441\nEpoch 6/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 133ms/step - categorical_accuracy: 0.6525 - loss: 0.6528 - val_categorical_accuracy: 0.6500 - val_loss: 0.6479\nEpoch 7/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 131ms/step - categorical_accuracy: 0.6398 - loss: 0.6546 - val_categorical_accuracy: 0.6500 - val_loss: 0.6398\nEpoch 8/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 131ms/step - categorical_accuracy: 0.6483 - loss: 0.6678 - val_categorical_accuracy: 0.6500 - val_loss: 0.6513\nEpoch 9/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 134ms/step - categorical_accuracy: 0.6483 - loss: 0.6564 - val_categorical_accuracy: 0.6500 - val_loss: 0.6469\nEpoch 10/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 133ms/step - categorical_accuracy: 0.6568 - loss: 0.6495 - val_categorical_accuracy: 0.6500 - val_loss: 0.6360\n\nTestando imagens................................................!\n\n\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 201ms/step - categorical_accuracy: 0.5127 - loss: 0.7497\n['loss', 'compile_metrics']\n\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 162ms/step\n\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 95ms/step\n\n\nFOLD 4:\n\nCarregamento das imagens do fold 4 para treinamento.............!\nNumero de imagens no treinamento: 237 imagens.\nNumero de imagens na validação: 80 imagens.\nNumero de imagens no teste: 78 imagens.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_442\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_442\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_55 (\u001b[38;5;33mInputLayer\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m1\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_317 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50\u001b[0m, \u001b[38;5;34m50\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │           \u001b[38;5;34m320\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_318 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m25\u001b[0m, \u001b[38;5;34m25\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m18,496\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_319 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │        \u001b[38;5;34m73,856\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_320 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m295,168\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_321 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_322 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_55 (\u001b[38;5;33mFlatten\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m43264\u001b[0m)          │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_210 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │    \u001b[38;5;34m11,075,840\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_211 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │        \u001b[38;5;34m32,896\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_212 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m8,256\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_70 (\u001b[38;5;33mDropout\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_213 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)              │           \u001b[38;5;34m130\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_55 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_317 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_318 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_319 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │        <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_320 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">295,168</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_321 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_322 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_55 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">43264</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_210 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │    <span style=\"color: #00af00; text-decoration-color: #00af00\">11,075,840</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_211 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_212 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_70 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_213 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">130</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m12,685,122\u001b[0m (48.39 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12,685,122</span> (48.39 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m12,685,122\u001b[0m (48.39 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12,685,122</span> (48.39 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"\nIniciando o treinamento.........................................!\n\nEpoch 1/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6s/step - categorical_accuracy: 0.4430 - loss: 0.7443 - val_categorical_accuracy: 0.6500 - val_loss: 21.5076\nEpoch 2/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 195ms/step - categorical_accuracy: 0.6582 - loss: 21.5236 - val_categorical_accuracy: 0.3500 - val_loss: 1.6422\nEpoch 3/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 150ms/step - categorical_accuracy: 0.3629 - loss: 1.5924 - val_categorical_accuracy: 0.6500 - val_loss: 0.6545\nEpoch 4/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 145ms/step - categorical_accuracy: 0.6076 - loss: 0.7130 - val_categorical_accuracy: 0.6500 - val_loss: 0.6591\nEpoch 5/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 135ms/step - categorical_accuracy: 0.6203 - loss: 0.6623 - val_categorical_accuracy: 0.6500 - val_loss: 0.6580\nEpoch 6/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 132ms/step - categorical_accuracy: 0.6498 - loss: 0.6608 - val_categorical_accuracy: 0.6500 - val_loss: 0.6439\nEpoch 7/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 132ms/step - categorical_accuracy: 0.6498 - loss: 0.6450 - val_categorical_accuracy: 0.6500 - val_loss: 0.6392\nEpoch 8/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 130ms/step - categorical_accuracy: 0.6498 - loss: 0.6369 - val_categorical_accuracy: 0.6500 - val_loss: 0.6413\nEpoch 9/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 133ms/step - categorical_accuracy: 0.6624 - loss: 0.6419 - val_categorical_accuracy: 0.6500 - val_loss: 0.6255\nEpoch 10/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 134ms/step - categorical_accuracy: 0.6540 - loss: 0.6192 - val_categorical_accuracy: 0.6625 - val_loss: 0.6201\n\nTestando imagens................................................!\n\n\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 215ms/step - categorical_accuracy: 0.5105 - loss: 0.7222\n['loss', 'compile_metrics']\n\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 181ms/step\n\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 96ms/step\n\n\nFOLD 5:\n\nCarregamento das imagens do fold 5 para treinamento.............!\nNumero de imagens no treinamento: 237 imagens.\nNumero de imagens na validação: 80 imagens.\nNumero de imagens no teste: 78 imagens.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_444\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_444\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_56 (\u001b[38;5;33mInputLayer\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m1\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_323 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50\u001b[0m, \u001b[38;5;34m50\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │           \u001b[38;5;34m320\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_324 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m25\u001b[0m, \u001b[38;5;34m25\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m18,496\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_325 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │        \u001b[38;5;34m73,856\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_326 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m295,168\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_327 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_328 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_56 (\u001b[38;5;33mFlatten\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m43264\u001b[0m)          │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_214 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │    \u001b[38;5;34m11,075,840\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_215 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │        \u001b[38;5;34m32,896\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_216 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m8,256\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_71 (\u001b[38;5;33mDropout\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_217 (\u001b[38;5;33mDense\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)              │           \u001b[38;5;34m130\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_56 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_323 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_324 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_325 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │        <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_326 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">295,168</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_327 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_328 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_56 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">43264</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_214 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │    <span style=\"color: #00af00; text-decoration-color: #00af00\">11,075,840</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_215 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_216 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_71 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_217 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">130</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m12,685,122\u001b[0m (48.39 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12,685,122</span> (48.39 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m12,685,122\u001b[0m (48.39 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">12,685,122</span> (48.39 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"\nIniciando o treinamento.........................................!\n\nEpoch 1/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6s/step - categorical_accuracy: 0.5063 - loss: 0.7362 - val_categorical_accuracy: 0.6500 - val_loss: 18.0815\nEpoch 2/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 146ms/step - categorical_accuracy: 0.6498 - loss: 18.4018 - val_categorical_accuracy: 0.3500 - val_loss: 0.8038\nEpoch 3/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 137ms/step - categorical_accuracy: 0.4388 - loss: 0.9080 - val_categorical_accuracy: 0.6500 - val_loss: 0.6712\nEpoch 4/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 138ms/step - categorical_accuracy: 0.6329 - loss: 0.6679 - val_categorical_accuracy: 0.6500 - val_loss: 0.6427\nEpoch 5/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 131ms/step - categorical_accuracy: 0.6793 - loss: 0.6517 - val_categorical_accuracy: 0.6500 - val_loss: 0.6433\nEpoch 6/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 133ms/step - categorical_accuracy: 0.6540 - loss: 0.6653 - val_categorical_accuracy: 0.6500 - val_loss: 0.6581\nEpoch 7/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 132ms/step - categorical_accuracy: 0.6203 - loss: 0.6646 - val_categorical_accuracy: 0.6500 - val_loss: 0.6399\nEpoch 8/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 134ms/step - categorical_accuracy: 0.6667 - loss: 0.6501 - val_categorical_accuracy: 0.6500 - val_loss: 0.6349\nEpoch 9/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 131ms/step - categorical_accuracy: 0.6624 - loss: 0.6466 - val_categorical_accuracy: 0.6500 - val_loss: 0.6322\nEpoch 10/10\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 130ms/step - categorical_accuracy: 0.6540 - loss: 0.6422 - val_categorical_accuracy: 0.6500 - val_loss: 0.6371\n\nTestando imagens................................................!\n\n\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 207ms/step - categorical_accuracy: 0.5105 - loss: 0.6894\n['loss', 'compile_metrics']\n\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 172ms/step\n\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 97ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"from matplotlib import cm\nfrom tensorflow.keras.models import load_model\nfrom tf_keras_vis.gradcam import Gradcam\nfrom tf_keras_vis.utils import normalize\n\ndef visualize_gradcam(model, img_array, image_title):\n    # Ensure the input image array has the correct shape and type\n    img_array = np.expand_dims(img_array, axis=-1)  # Ensure it has a single channel if needed\n    img_array = np.expand_dims(img_array, axis=0)   # Add batch dimension if needed\n    img_array = img_array.astype(np.float32)        # Convert to float32 if needed\n\n    # Create Gradcam object\n    gradcam = Gradcam(model,\n                      model_modifier=None,  # Modify if needed\n                      clone=True)\n\n    # Define a função de pontuação (score function)\n    def score_function(output):\n        return output[:, np.argmax(output[0])]  # Use o índice da classe com maior probabilidade\n\n    # Generate heatmap with GradCAM\n    cam = gradcam(score=score_function,\n                  penultimate_layer=-1,  # Index of the penultimate layer\n                  seed_input=img_array)\n\n    # Process the heatmap for visualization\n    heatmap = np.uint8(cm.jet(cam)[..., :3] * 255)  # Apply colormap and convert to uint8\n    heatmap = np.squeeze(heatmap)  # Remove single-dimensional entries from the shape of an array\n\n    # Render\n    plt.figure(figsize=(6, 4))\n    plt.title(image_title, fontsize=16)\n    plt.imshow(img_array[0, :, :, 0], cmap='gray', alpha=0.5)  # Show the grayscale image\n    plt.imshow(heatmap, cmap='jet', alpha=0.5)  # Overlay heatmap\n    plt.axis('off')\n    plt.tight_layout()\n    plt.show()\n\n# Carregar o modelo treinado\nmodel = load_model(RESULTS_PATH + f'/{DATASET_TYPE}-CNN-{fold+1}.h5')\n\n# Imagens de teste\nimgs_array = []\n\ncaminhos = ['/kaggle/input/myocardits-dataset-cleaned/224/Sick/Individuo_18/series0005-Body/img0013-40.5666.jpg',\n            '/kaggle/input/myocardits-dataset-cleaned/224/Normal/Individuo_10/series0001-Body/img0001--9.jpg',\n            '/kaggle/input/myocardits-dataset-cleaned/224/Normal/Individuo_01/series0003-Body/img0001--43.937.jpg',\n            '/kaggle/input/myocardits-dataset-cleaned/224/Sick/Individuo_35/series0006-Body/img0011-44.8372.jpg']\nfor caminho in caminhos:\n    img = Image.open(caminho)\n    img = img.resize(TARGET_SIZE)\n    img_array = np.array(img)\n    imgs_array.append(img_array)\n\nfor img_array in imgs_array:\n    image_title = 'Mapa de Calor'\n\n    # Visualizar com GRAD-CAM\n    visualize_gradcam(model, img_array, image_title)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-15T05:08:34.656667Z","iopub.execute_input":"2024-07-15T05:08:34.657593Z","iopub.status.idle":"2024-07-15T05:08:35.904358Z","shell.execute_reply.started":"2024-07-15T05:08:34.657553Z","shell.execute_reply":"2024-07-15T05:08:35.901806Z"},"trusted":true},"execution_count":93,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Salvamento de Dados","metadata":{}},{"cell_type":"code","source":"#--------------------------------------------------------------------------\n# SALVAMENTO DOS DADOS\n\nprint('\\nSalvando informações da rede......................................!')\n\npath = RESULTS_PATH + f'/{DATASET_TYPE}-resultados_{CNN_MODEL}-batch{BATCH_SIZE}.txt'\n    \nmatrix_total = np.sum(lst_matrix, axis=0)\naccuracy_total = np.trace(matrix_total)/np.sum(matrix_total)\n\nmatrix_total_v = np.sum(lst_matrix_v, axis=0)\naccuracy_total_v = np.trace(matrix_total_v)/np.sum(matrix_total_v)\n    \nlosses=[]\nval_losses=[]\naccuracies=[]\nval_accuracies=[]\n\nfor item in lst_history:\n    \n    history=item.history\n    loss=history['loss']\n    accuracy=history['categorical_accuracy']\n    \n    val_loss=history['val_loss']\n    val_accuracy=history['val_categorical_accuracy']\n    \n    losses.append(sum(loss)/len(loss))\n    accuracies.append(sum(accuracy)/len(accuracy))\n    \n    val_losses.append(sum(val_loss)/len(val_loss))\n    val_accuracies.append(sum(val_accuracy)/len(val_accuracy))\n\nf1=open(path,'w')\nf1.write(f'TREINAMENTO USANDO {CNN_MODEL}-batch{BATCH_SIZE} E DATASET {DATASET_TYPE}\\n')\n\nf1.write('\\nTest Accuracias: '+str(lst_acc)+'\\nTest Losses: '+str(lst_loss))\nf1.write('\\n\\nTest Accuracies Mean: '+str(np.mean(lst_acc)))\n\nf1.write('\\n\\n__________________________________________________________\\n')\n\nf1.write('\\n\\nValid Accuracies: '+str(val_accuracies)+'\\nValid Losses: '+str(val_losses))\nf1.write('\\n\\nValid Accuracies Mean: '+str(np.mean(val_accuracies)))\n\nf1.write('\\n\\n__________________________________________________________\\n')\n\nf1.write('\\nAccuracies from Confusion Matrix: '+str(lst_accuracy))\n\nf1.write('\\n\\nTotal Confusion Matrix: \\n'+str(matrix_total)+'\\n\\n')\nf1.write('\\nTotal Accuracie from Confusion Matrix: '+str(accuracy_total))\n\nf1.write('\\n\\n__________________________________________________________\\n')\n\nf1.write('\\n\\nTotal Confusion Matrix Valid: \\n'+str(matrix_total_v)+'\\n\\n')\nf1.write('\\nTotal Accuracie from Confusion Matrix Valid: '+str(accuracy_total_v))\n\nf1.write('\\n\\n__________________________________________________________\\n')\n\nf1.write('\\n\\nMetrics for all Folds: \\n\\n')\nfor i in range(len(lst_reports)):\n    f1.write(str(lst_reports[i]))\n    f1.write('\\n\\nTraining Time: '+str(lst_times[i])+'\\nAUC: '+str(lst_AUC[i]))\n    f1.write('\\n\\nAcurácia: ' + str(lst_accuracy[i]))\n    f1.write('\\n\\nMatriz de Confusao: \\n'+str(lst_matrix[i])+'\\n\\n__________________________________________________________\\n')\nf1.close()","metadata":{"execution":{"iopub.status.busy":"2024-07-15T03:52:46.892927Z","iopub.status.idle":"2024-07-15T03:52:46.893372Z","shell.execute_reply.started":"2024-07-15T03:52:46.893155Z","shell.execute_reply":"2024-07-15T03:52:46.893174Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def NetPlot(net_histories,n_epch):\n    import numpy as np\n    import matplotlib.pyplot as plt\n\n    losses=[]\n    val_losses=[]\n    accuracies=[]\n    val_accuracies=[]\n\n    for item in net_histories:\n\n        history=item.history\n        loss=history['loss']\n        val_loss=history['val_loss']\n        accuracy=history['categorical_accuracy']\n        val_accuracy=history['val_categorical_accuracy']\n\n        losses.append(loss)\n        val_losses.append(val_loss)\n        accuracies.append(accuracy)\n        val_accuracies.append(val_accuracy)\n\n\n    losses2=np.zeros((1,n_epch))\n    val_losses2=np.zeros((1,n_epch))\n    accuracies2=np.zeros((1,n_epch))\n    val_accuracies2=np.zeros((1,n_epch))\n\n    for i in losses:\n        losses2+=i\n\n    for i in val_losses:\n        val_losses2+=i\n\n    for i in accuracies:\n        accuracies2+=i\n\n    for i in val_accuracies:\n        val_accuracies2+=i\n        \n    N_SPLITS = 5\n\n    # 10 is number of folds\n    losses2=(losses2/N_SPLITS).flatten()\n    accuracies2=(accuracies2/N_SPLITS).flatten()\n    val_losses2=(val_losses2/N_SPLITS).flatten()\n    val_accuracies2=(val_accuracies2/N_SPLITS).flatten()\n    \n    # print('\\nAccuracies: '+ str(accuracies2) +'\\nLosses: '+ str(losses2))\n\n    plt.figure('Accracy Diagram',dpi=600)\n    plt.title(f'Accracy Diagram - {CNN_MODEL}-batch{BATCH_SIZE} - {DATASET_TYPE}')\n    plt.xlabel('Epochs')\n    plt.ylabel('Accuracy')\n    plt.plot(accuracies2,color='black')\n    plt.plot(val_accuracies2,color='green')\n    plt.legend(['Train Data','Validation Data'])\n    plt.savefig(f'{RESULTS_PATH}/Accuracy-Diagram-{CNN_MODEL}-batch{BATCH_SIZE}.jpg')\n\n    plt.figure('Loss Diagram',dpi=600)\n    plt.title(f'Loss Diagram - {CNN_MODEL}-batch{BATCH_SIZE} - {DATASET_TYPE}')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.plot(losses2,color='black')\n    plt.plot(val_losses2,color='green')\n    plt.legend(['Train Data','Validation Data'])\n    plt.savefig(f'{RESULTS_PATH}/Loss-Diagram-{CNN_MODEL}-batch{BATCH_SIZE}.jpg')\n    \nNetPlot(lst_history,N_EPOCHS)","metadata":{"execution":{"iopub.status.busy":"2024-07-15T03:49:25.186596Z","iopub.status.idle":"2024-07-15T03:49:25.187002Z","shell.execute_reply.started":"2024-07-15T03:49:25.186806Z","shell.execute_reply":"2024-07-15T03:49:25.186823Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Zipando pasta com resultados\nimport zipfile\n\ndef compactar_pasta(pasta, nome_arquivo_zip):\n    with zipfile.ZipFile(nome_arquivo_zip, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for root, _, files in os.walk(pasta):\n            for arquivo in files:\n                caminho_completo = os.path.join(root, arquivo)\n                zip_file.write(caminho_completo, os.path.relpath(caminho_completo, pasta))\n\nnome_arquivo_zip = f'{DATASET_TYPE}-{SIZE}-{CNN_MODEL}-batch{BATCH_SIZE}-results.zip'\ncompactar_pasta(RESULTS_PATH, nome_arquivo_zip)","metadata":{"execution":{"iopub.status.busy":"2024-07-15T03:49:25.188325Z","iopub.status.idle":"2024-07-15T03:49:25.188676Z","shell.execute_reply.started":"2024-07-15T03:49:25.1885Z","shell.execute_reply":"2024-07-15T03:49:25.188515Z"},"trusted":true},"execution_count":null,"outputs":[]}]}